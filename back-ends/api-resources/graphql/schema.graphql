type Author {
  id: ID!
  email: String
  name: String
  username: String
}

type Comment implements Node {
  id: ID!
  text: String
  author: Author
  post: String
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]
}

type CommentEdge {
  node: Comment
  cursor: String!
}

input CreateCommentInput {
  postId: String!
  text: String!
  clientMutationId: String!
}

type CreateCommentPayload {
  post: Post
  commentEdge: CommentEdge
  clientMutationId: String!
}

input CreatePostInput {
  title: String!
  body: String!
  clientMutationId: String!
}

type CreatePostPayload {
  viewer: User
  postEdge: PostEdge
  clientMutationId: String!
}

input CreateTagInput {
  text: String!
  clientMutationId: String!
}

type CreateTagPayload {
  viewer: User
  clientMutationId: String!
}

input DeleteCommentInput {
  id: String!
  clientMutationId: String!
}

type DeleteCommentPayload {
  id: String
  post: Post
  clientMutationId: String!
}

input DeletePostInput {
  id: String!
  clientMutationId: String!
}

type DeletePostPayload {
  id: String
  viewer: User
  clientMutationId: String!
}

input DeleteUserInput {
  id: String!
  clientMutationId: String!
}

type DeleteUserPayload {
  id: String
  viewer: User
  clientMutationId: String!
}

type Mutation {
  createPost(input: CreatePostInput!): CreatePostPayload
  updatePost(input: UpdatePostInput!): UpdatePostPayload
  deletePost(input: DeletePostInput!): DeletePostPayload
  createComment(input: CreateCommentInput!): CreateCommentPayload
  updateComment(input: UpdateCommentInput!): UpdateCommentPayload
  deleteComment(input: DeleteCommentInput!): DeleteCommentPayload
  createTag(input: CreateTagInput!): CreateTagPayload
  toggleTagOnPost(input: ToggleTagOnPostInput!): ToggleTagOnPostPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post implements Node {
  id: ID!
  title: String
  url_path: String
  body: String
  tags: [Tag]
  comments(after: String, first: Int, before: String, last: Int, tag: String, username: String): CommentConnection
  author: Author
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]
}

type PostEdge {
  node: Post
  cursor: String!
}

type Query {
  node(id: ID!): Node
  viewer: User
}

type Tag implements Node {
  id: ID!
  text: String
}

input ToggleTagOnPostInput {
  status: Boolean
  tagId: String
  postId: String
  clientMutationId: String!
}

type ToggleTagOnPostPayload {
  post: Post
  clientMutationId: String!
}

input UpdateCommentInput {
  id: String!
  text: String
  clientMutationId: String!
}

type UpdateCommentPayload {
  comment: Comment
  clientMutationId: String!
}

input UpdatePostInput {
  id: String!
  title: String
  body: String
  url_path: String
  clientMutationId: String!
}

type UpdatePostPayload {
  post: Post
  clientMutationId: String!
}

input UpdateUserInput {
  id: String!
  name: String
  email: String
  username: String
  clientMutationId: String!
}

type UpdateUserPayload {
  user: User
  clientMutationId: String!
}

type User implements Node {
  id: ID!
  email: String
  name: String
  username: String
  tags: [Tag]
  posts(after: String, first: Int, before: String, last: Int, tag: String, username: String): PostConnection
}
